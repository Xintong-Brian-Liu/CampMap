- models
- public
    -
- routes
    - Create different routes for different models 
    - Connected by app.js
- seeds
    This helps us generate initial data
- utils:
    - 
- views:
    - campgrounds: pages related to campgrounds
    - layouts: templates
    - partials: small partials 
YelpCamp: Campgrounds CRUD
    1. Set up the express and ejs 
        1.1. Start at localhost 
        1.2. path, and route to view
    2. Set up mongoose 
        2.1. Create models folder
        2.2. Export model 'Campground' to let it available globally. 
        2.3. Set up Schema 
        2.4. Connect MongoDB with mongoose
        2.5. Import model and create new campground
        
    3. Seeding Camgrounds -> Insert data into Campground
        3.1. Create seeds folder 
        3.2. 
            Create cities.js to store all the data. 
            Create index.js to filter the data that we want to show 
            Create seedsHelpers.js to export other data 
        3.3. index.js 
            1. Connect with MongoDB
            2. Connect with exsiting data from cities and seedsHelpers
            3. Use them to generate random data
            !!! Remember to use async while generating the data, and disconnect after.

    At this point, the Camground has the data generated by seed. 
    !!! Whenever we need to communicate(make changes to Campgound), we need to use async-await
    4. Camground Index -  home page - index.ejs
        4.1 Create campground folder in views
        4.2 Pass in the campground data from app.js in the index.ejs
        4.3 Loop the data and show the titles.

    5. Campground show - detail page - show.ejs
        5.1 Use findById(id) to find target campground in the Camground model.
            Get the id from req.params
        5.2 Use the campground.id to show the page

    6. Campground New & Create
        !!! Do not place the /new under /:id 
        5.1 Create form to accept information
        5.2 Use POST to update 
        Tell the req to parse the html
    7. Delete

Adding basic styles - boilerplate
    1. require EJS-Mate
    2. Create layouts foler under views
    3. Create boilerplate.ejs
        We treate this file as the template 
        Use <%- body %> to change what content to render based different ejs files
        把这个位置留出来，然后建立其他的ejs文件去渲染不同的page
    4. Extract body from other ejs file 
        add <% layout('layouts/boilerplate.ejs') %> to other ejs 
    5. Create partials folder to store things like header, footer
    6. Import nav to boilerplate.ejs 
        <%- include('../partials/nav.ejs') %> 
    7. Set up the footer
        7.1 Create footer.ejs 
        7.2 We want it to stick on the bottom
            !!! d-flex flex-column
            7.2.1 Expand body to the fullest -> vh-100 (boilerplate.ejs)
            7.2.2 Set the margin-top of footer to auto to fit the body height -> mt-auto (footer.ejs)
    8. Adding image
        8.1 Update the model and seed by adding image property 
    9. Styling Campground Index - Campgrounds page  
        1. Use card to organize the layout 
            一共12col， 然后那个md是break point
    10. New
    1 2 3 4 5 6 7 8 9 10 11 12 
    col-6 offset-3 -> [4,9]


Error 
    Most of time errors come from interacting with DB, API, and services.

Validations
    Client-side -> Need to check whether user input the value. 
    Server-side -> Need to check whether all the properties are here when creating the object.  Use middleware
    1. Use the Bootstrap validation -> 这个去展示，如果是空的显示红色，如果是好的，显示绿色
        1.1 Add 'required' in all the needed classes
        1.2 Add 'novalidate', class="validated-form" in the form tab class
        1.3 Applying JS in the boilingplate.js to preventing us submitting the form if some info is missing 
        1.4 Add valid-feedback
    2. Basic Error Handle 
        2.1 Add err handle -> 这里负责收集到next的指令，然后对error进行处理
            app.use((err, req, res, next) => {
                res.send('Something went wrong')
            })
        2.2 use Try and Catch and next() in where error might happen; 
            If there is any error go to next().
    3. Define ExpressError Class
        3.1 Create utils folder and create ExpressError.js, and export the module
        3.2 Create catchAsync.js 
            We accept a function and return that function and execute that function 
            But it catch the error to next if there is any.
        3.3 Import catchAsync in app.js and remove the 'try-catch' 包装成catchAsync() 
    4. More errors
        4.1 404
        4.2 Require ExpressError, and generate the error from that, so each error should have a StatusCode and a message
        4.3 In the error handle func, we get the error data and send the message.
        4.4 Create the error.ejs, and render it through the error handler in app.js
    5. JOI Schema Validation - By setting up the JOI Schema, so we can detece whether data is passing in in right format
        At this point, the client-side of error is being handles, 
        but what if someone use the Postman to bypass the client?
        We need to handle DB-side of error 
        5.1 We can do it all mannually, to check each one of the properties, and get feedback for each. 
            if(!req.body.campground) throw new ExpressError('sss', 400);
        5.2 Or we just JOI -> 帮助我们不需要手动去写报错
            5.2.1 Intall JOI and require it first 
            5.2.2 Define the schema 
            5.2.3 Pass that error message to the ExpressError
                    const { error } = campgroundSchema.validate(req.body)
                    if(error) {
                        const msg = error.details.map(e => e.message).join(',')
                        throw new ExpressError(msg, 400)
                    }
    6. JOI Validation Middleware
        6.1 Move that JOI validation out as a middleware, so we can use it anywhere.
        6.2 Apply validation to those need it.  
        6.3 Create schemas.js to store the JOI schema 

Adding Review Model
    1. Create review model.
        1.1 Add reviews to the campground schema, with ref back to Review model 
    2. Adding the Review Form 
        2.1 Adding the form in the show.ejs
    3. Creating Reviews
        3.1 Import the review model
        3.2 find the post by id and update the review in the post 
    4. Validating Review 
        Client-side
        4.1 Add novalidate to the <form></form> class 
        4.2 Add 'require' to the class where content need to be filled 
        4.3 Add valid-feedback to show the success message
        Server-side
        4.4 Add Joi schema to avoid Server-side error 
        4.5 Export the module and import into app.js
        4.6 Create the middleware to handle the error
        4.7 Add the middleware function to where it is needed. 
    5. Display reviews
        5.1 Populate the review in each campground => .populate('review')
            Before -> reviews: [ 6084fc99903a303f53ce0caf ]
            After -> reviews: [ { _id: 6084fc99903a303f53ce0caf, rating: 3, body: 'a', __v: 0 } ]
        5.2 in show.ejs iterating the review and show them 
    6. Styling review
        6.1 Use card 
            <card>
                <card-body>
                    <card-title></card-title>
                </card-body>
            </card>
    7. Deleting Review
        We need to delete the review in reviews and also review in campgrounds 
        1. Create app.delete in js to catch the query
        2. Create the form to send the query 
        3. Delete in reviews    
            using findByIdAndDelete to delete review in reviews
        4. Delete in campgrounds 
            use pull 
            await Campground.findByIdAndUpdate(id, {$pull: { reviews: reviewId }})
            Find the campground by id and pull the review by reviewId.
    8. Campgound Delete Middleware
        Delete all the reviews when deleting a campground 
        1. Mongoose middleware to handle when 'findByIdAndDelete' activated, do Something
            当特定的function被使用之后，触发这个middleware
        2. pre/post 
        3. We pass in the campground as a doc, and delete all the reviews that their id can be found in the campground 
            删除所有能够在文件中被找到id的review
            controller - review
                const { id, reviewId } = req.params;
                await Campground.findByIdAndUpdate(id, {$pull: { reviews: reviewId }})
            model - campground
                CampgroundSchema.post('findOneAndDelete', async function (doc) {
                    if(doc) {
                        await Review.remove({
                            _id: {
                                $in: doc.reviews
                            }
                        })
                    }
                })
            !!! 这个办法可行，但是需要一一对应触发的function，如果我们删除post不使用findOneAndDelete那么就对应不上
